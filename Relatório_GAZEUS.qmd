---
title: "Teste Técnico" # Título do relatório
subtitle: "**Posição de Data Analyst Jr - Buraco Jogatina**"
author: "Fernanda Kelly R. Silva" # Autor(a)
lang: pt 
date: "`r format(Sys.Date())`" 
date-format: short 
toc: true 
format: 
    html: 
      #css: ["custom.css"] 
      code-fold: false 
      code-tools: true  
      theme: 
        light: cosmo
        dark: superhero 
#title-block-banner: "#874a9c" 
code-annotations: hover 
execute:
  warning: false
  message: false
---

```{r}
#| echo: false

library(tidyverse)
```

# Tarefa 01: SQL

Um sistema de pagamentos, registra as transações dos seus usuários em duas tabelas:

Users: Contém o registro de usuários do sistema. Os seus atributos são:

-   id: Identificador único de usuário
-   age (idade): em anos
-   país de residência: país onde o usuários indicou que reside

Transactions: Que contém o registro de todas as transações que os usuários realizam através do sistema.

-   transaction_id: Identificador único da transação
-   transaction_date: Data na qual a transação foi realizada. O tipo é timestamp, ou seja, é um tipo de data que contém o ano, mês, dia, hora, minuto e segundos.
-   user_id: Identificador do usuário que realizou a transação (é uma chave externa à tabela users)
-   transaction_state: Campo que indica o estado da transação que pode ser *INITIATED*, *SUCCESS*, *FRAUD* or *CANCELLED*.
-   transaction_amount: Valor da transação em USD

Com estes dados disponíveis, precisamos gerar queries SQL para responder às seguintes perguntas. **Para fins didáticos, criei esses bancos de dados para simular a resolução das questões.**

## tabela_transactions

```{r}
#| echo: false
tabela_transactions <- tibble::tribble(
                         ~user_id, ~transaction_date, ~transaction_id, ~transaction_state, ~transaction_amount,
                         "1", "2024-03-12 15:08:49 UTC", "255", "sucesso", "119.65",
                         "2", "2024-03-23 20:08:03 UTC", "585", "INITIATED", "22.63",
                         "3", "2024-03-18 10:56:25 UTC", "178", "CANCELLED", "225.87",
                         "4", "2024-03-12 08:21:32 UTC", "887", "SUCCESS", "16.58",
                         "5", "2024-03-30 05:24:49 UTC", "569", "FRAUD", "1225.89",
                         "6", "2024-03-21 12:32:51 UTC", "789", "SUCCESS", "59.90",
                         "7", "2024-03-10 08:25:49 UTC", "236", "FRAUD", "256.98",
                         "7", "2024-03-10 05:21:49 UTC", "458", "FRAUD", "986.69",
                         "7", "2024-03-09 01:08:49 UTC", "125", "FRAUD", "1256.89",
                         ) %>% 
                      dplyr::mutate(transaction_amount = as.numeric(transaction_amount),
                                    data_curta = as.Date(transaction_date)) 
```

```{r}
knitr::kable(tabela_transactions)
```

## tabela_user

```{r}
#| echo: false
tabela_user <- tibble::tribble(
                         ~id, ~age, ~pais, 
                         "1", "18", "Brasil",
                         "2", "29", "Estados Unidos",
                         "3", "55", "África do Sul",
                         "4", "32", "Bolívia",
                         "5", "60", "Brasil",
                         "6", "42", "Brasil",
                         "7", "38", "África do Sul",
                         ) 
```

```{r}
knitr::kable(tabela_user)
```

Para que a experiência do SQL seja real, vou conectar as bases com o SQLite.

```{r}
library(dbplyr)
library(dplyr)

con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
copy_to(con, tabela_user)
copy_to(con, tabela_transactions)

tabela_user <- tbl(con, "tabela_user")                 # <1>
tabela_transactions <- tbl(con, "tabela_transactions") # <2>
```

1.  Conectando a base de dados {tabela_user} com o SQLite
2.  Conectando a base de dados {tabela_transactions} com o SQLite

::: panel-tabset
# A

Qual é a idade média de usuários do sistema por país?

```{r}
tabela_A <- tabela_user %>%
                     dplyr::group_by(pais) %>% 
                     dplyr::summarise(media_idade = round(mean(age, na.rm = TRUE),2))

# tabela_A %>%
#   show_query()
```

::: callout-tip
# Resposta
:::

``` SQL
<SQL>
SELECT `pais`, ROUND(AVG(`age`), 2) AS `media_idade`
FROM `tabela_user`
GROUP BY `pais`
```
# B

Qual é o país com a maior quantidade de dinheiro transacionado (considere só transações finalizadas com sucesso ou "SUCCESS")?

Como vamos precisar do merge das duas tabelas, vou criar a **tabela_merge** sem algum filtro para facilitar as consultas e não alocar memória desnecessária.

```{r}
tabela_merge <- tabela_transactions %>%
                 dplyr::left_join(tabela_user, by = c("user_id" = "id")) 
```

```{r}
#| echo: false
tabela_B <- tabela_merge %>% 
                  dplyr::filter(transaction_state == "SUCCESS" | transaction_state == "sucesso") %>% 
                  dplyr::slice_max(transaction_amount)

# tabela_B %>%
#   show_query()
```

::: callout-tip
# Resposta
:::

``` SQL
<SQL>
SELECT
  `user_id`,
  `transaction_date`,
  `transaction_id`,
  `transaction_state`,
  `transaction_amount`,
  `data_curta`,
  `age`,
  `pais`
FROM (
  SELECT `q01`.*, RANK() OVER (ORDER BY `transaction_amount` DESC) AS `col01`
  FROM (
    SELECT `tabela_transactions`.*, `age`, `pais`
    FROM `tabela_transactions`
    LEFT JOIN `tabela_user`
      ON (`tabela_transactions`.`user_id` = `tabela_user`.`id`)
  ) AS `q01`
  WHERE (`transaction_state` = 'SUCCESS' OR `transaction_state` = 'sucesso')
) AS `q01`
WHERE (`col01` <= 1)
```
# C

Qual é o país com maior taxa de fraude em porcentagem respeito ao número de transações totais no país?

```{r}
#| echo: false
library(janitor)
tabela_C <- tabela_merge %>% 
              dplyr::group_by(transaction_state) %>% 
              dplyr::mutate(taxa = transaction_amount/sum(transaction_amount)) %>% 
              dplyr::ungroup() %>%
              dplyr::filter(transaction_state == "FRAUD") %>% 
              dplyr::slice_max(taxa)
# tabela_C %>%
#   show_query()
```

::: callout-tip
# Resposta
:::

``` SQL
<SQL>
SELECT
  `user_id`,
  `transaction_date`,
  `transaction_id`,
  `transaction_state`,
  `transaction_amount`,
  `data_curta`,
  `age`,
  `pais`,
  `taxa`
FROM (
  SELECT `q01`.*, RANK() OVER (ORDER BY `taxa` DESC) AS `col01`
  FROM (
    SELECT
      `q01`.*,
      `transaction_amount` / SUM(`transaction_amount`) OVER (PARTITION BY `transaction_state`) AS `taxa`
    FROM (
      SELECT `tabela_transactions`.*, `age`, `pais`
      FROM `tabela_transactions`
      LEFT JOIN `tabela_user`
        ON (`tabela_transactions`.`user_id` = `tabela_user`.`id`)
    ) AS `q01`
  ) AS `q01`
  WHERE (`transaction_state` = 'FRAUD')
) AS `q01`
WHERE (`col01` <= 1)

```

# D

Na mesma linha da pergunta anterior, responda qual é a faixa de idade de usuários que mais cometem fraude (em percentagem). Separe as faixas etárias em: (\<18 anos, 18-30 anos, 30 - 45 anos, 45 - 60 anos, 60 \> anos) e considere que para responder essa pergunta, você deverá considerar o fato que um usuário pode ter executado várias transações, das quais poucas (ou muitas) podem ter sido fraude entre as demais.

```{r}
#| echo: false
tabela_D <- tabela_merge %>% 
             dplyr::mutate(age_cat = dplyr::case_when(age < 18 ~ "menor que 18 anos",
                                                      age >= 18 & age < 30 ~ "18-29 anos",
                                                      age >= 30 & age < 45 ~ "30-44 anos",
                                                      age >= 45 & age < 60 ~ "45-59 anos",
                                                      age >= 60  ~ "maior igual a 60 anos"),
                           taxa_idade = dplyr::if_else(transaction_state == "FRAUD", transaction_amount/sum(transaction_amount), 0))  
          
# tabela_C %>%
#   show_query()
```

::: callout-tip
# Resposta
:::

``` SQL
```
# E

Imagine que a camada executiva da empresa dona do sistema, precisa criar um Dashboard para monitorar o estado das transações nos últimos 3 dias. Para isso você precisa criar uma query SQL que calcule o número e dinheiro das transações não finalizadas, número e dinheiro de transações finalizadas com sucesso (SUCCESS), o número e dinheiro de transações canceladas (CANCELLED), o número e dinheiro de fraudes (FRAUD), agrupado por país, nos 3 dias anteriores de quando o executivo da empresa consulte seu Dashboard.

```{r}
#| echo: false
tabela_E <- tabela_merge %>% 
              dplyr::mutate(tres_n = dplyr::if_else((lubridate::today() - 1) == data_curta, 1,
                                                    dplyr::if_else((lubridate::today() - 2) == data_curta, 1,
                                                                   dplyr::if_else((lubridate::today() - 2) == data_curta,1,0)))) %>% 
              dplyr::filter(tres_n == 1) %>% 
              dplyr::mutate(transaction_state = dplyr::if_else(transaction_state == "sucesso", "SUCCESS", transaction_state)) %>% 
              dplyr::group_by(pais, transaction_state) %>% 
              dplyr::mutate(n_transacoes =  n(),
                            dinheiro = sum(transaction_amount))

# tabela_E %>%
#   show_query()
```

::: callout-tip
# Resposta
:::

``` SQL
<SQL>
SELECT
  `q01`.*,
  COUNT(*) OVER `win1` AS `n_transacoes`,
  SUM(`transaction_amount`) OVER `win1` AS `dinheiro`
FROM (
  SELECT
    `user_id`,
    `transaction_date`,
    `transaction_id`,
    CASE WHEN (`transaction_state` = 'sucesso') THEN 'SUCCESS' WHEN NOT (`transaction_state` = 'sucesso') THEN `transaction_state` END AS `transaction_state`,
    `transaction_amount`,
    `data_curta`,
    `age`,
    `pais`,
    `tres_n`
  FROM (
    SELECT
      `q01`.*,
      CASE WHEN ((DATE('now') - 1.0) = `data_curta`) THEN 1.0 WHEN NOT ((DATE('now') - 1.0) = `data_curta`) THEN (CASE WHEN ((DATE('now') - 2.0) = `data_curta`) THEN 1.0 WHEN NOT ((DATE('now') - 2.0) = `data_curta`) THEN (CASE WHEN ((DATE('now') - 2.0) = `data_curta`) THEN 1.0 WHEN NOT ((DATE('now') - 2.0) = `data_curta`) THEN 0.0 END) END) END AS `tres_n`
    FROM (
      SELECT `tabela_transactions`.*, `age`, `pais`
      FROM `tabela_transactions`
      LEFT JOIN `tabela_user`
        ON (`tabela_transactions`.`user_id` = `tabela_user`.`id`)
    ) AS `q01`
  ) AS `q01`
  WHERE (`tres_n` = 1.0)
) AS `q01`
WINDOW `win1` AS (PARTITION BY `pais`, `transaction_state`)
```
:::

# Tarefa 02: Python

Numa tribo ancestral e muito desenvolvida, orientada principalmente por uma cultura lógica e matemática, os nativos estão interessados no estudo das linguagens de outras tribos e civilizações.

Durante seus estudos, estes perceberam que as linguagens dessas outras civilizações são compostas por um conjunto de símbolos (letras do alfabeto) que são agrupados e combinados para representar conceitos (palavras). Assim mesmo, estes também sabem que cada civilização possui um alfabeto específico.

Na tentativa da tribo de avançar nos seus estudos, estes desejam saber qual seria o número de palavras possíveis a serem criadas em função do tamanho da palavra e o conjunto de símbolos (alfabeto) da civilização em estudo, independentemente se essas "palavras" representam algum significado ou não.

::: panel-tabset
# A

Você, que compartilha os atributos da tribo enquanto as capacidades analíticas e lógicas, precisa ajudá-la escrevendo um algoritmo para fazer o cálculo descrito acima, considerando que tribo oferecerá para você o alfabeto da civilização e o tamanho da palavra/combinação. Seu algoritmo deveria ser capaz de calcular que o número total de palavras possíveis (independente se tem significado ou não) é de 16.

OBS: NÃO PRECISA ESCREVER A LISTA DAS PALAVRAS, A TRIBO SÓ PRECISA DO NÚMERO!

# B

Para ajudar a tribo ainda mais! Você deverá modificar seu algoritmo (ou talvez escrever um novo) para fazer o mesmo cálculo, só que agora, as palavras não podem ter símbolos repetidos.
:::

# Tarefa 03: Estatística e Machine Learning

::: panel-tabset
# 1

Dado um dataset das estaturas (em centímetros) de 13 indivíduos:

Dataset = {175, 166, 183, 193, 155, 177, 173, 171, 162, 185, 176, 161, 188}

Calcule a média, a mediana, 20 percentil, 80 percentil e desvio padrão. Considerando os dados, responda a que distribuição (paramétrica) os dados se aproximam.

# 2

Com suas próprias palavras, explique em que consiste o teorema central do limite, e se possível, mencione a sua importância no campo da inferência estatística.

# 3

Suponha que numa escola, 2 grupos diferentes de estudantes (Grupo A e Grupo B) fazem o mesmo teste de matemáticas. As pontuações para cada grupo são dados pelos seguintes datasets:

Grupo A: {80, 85, 88, 90, 92, 75, 78} Grupo B: {75, 78, 82, 85, 87, 93, 99}

Elabore um teste de hipótese para determinar se existe uma diferença estatisticamente significativa entre a média das pontuações dos dois grupos com uma confiança de 95%.

# 4

Determine a hipótese nula (Ho) e hipótese alternativa (Ha) do seguinte cenário: Uma empresa afirma que o tempo médio dos seus produtos é menos de 4 dias. Você, conta com uma amostra dessas entregas para validar estadísticamente essa afirmação.

# 5

Calcule o coeficiente de correlação de pearson das variáveis "Número de aparições Zendaya em filmes por ano" e "Número de pessoas afogadas em piscinas no Brasil ao ano". Em base nos seus resultados, considera que a variável "Número de aparições Zendaya em filmes por ano" é um bom preditor do número de pessoas afogadas no Brasil?Justifique a sua resposta.

# 6

Explique a diferença entre amostragem estratificada e amostragem randômica ou aleatória. Discuta quais são as vantagens e desvantagens de cada uma e de exemplos de casos onde uma abordagem é mais adequada que a outra.

# 7

Se você treina um modelo de Machine Learning (ou estadístico), como você identificaria se seu modelo tem uma alta variância (overfitting) ou um alto viés (bias, ou underfitting). Caso seu modelo apresenta alta variância, como você resolveria esse problema?

# 8

Considere o seguinte modelo de regressão:

-   Salário = 1200+ 500.Idade + 600. Têm Faculdade + 50.Têm Linkedin

Interprete o efeito da Idade na variável salário. Que acontece com as pessoas que não tem faculdade? Considere agora que o desvio padrão do coeficiente da variável "Têm Linkedin" é de 47, por tanto o seu p-valor é \~0.92 (como visto na equação abaixo). O que isso implica para o modelo em questão? Essa variável é relevante?
:::

```{r}
#| warning: false
#| message: false

library(dados)
library(reactable)
library(dplyr)

dados_gapminder |>                                  # <1> 
  select(continente, pais, ano, pib_per_capita) |>  # <2> 
  reactable(
    groupBy = "continente",                         # <3>
    searchable = TRUE,                              # <4>
    outlined = TRUE,                                # <5>
    columns = list(ano = colDef(sortable = TRUE)))   # <6>
```

1.  Base do pacote {dados}
2.  Selecionando algumas colunas
3.  Agrupando pela coluna 'continente'
4.  Inserindo uma busca na tabela
5.  Linhas na tabela
6.  Ordem crescente na coluna 'ano'
